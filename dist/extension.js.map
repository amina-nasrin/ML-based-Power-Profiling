{"version":3,"file":"extension.js","mappings":"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","sources":[".././extension.js",".././node_modules/csv-parser/index.js","../external commonjs \"vscode\"","../external node-commonjs \"child_process\"","../external node-commonjs \"fs\"","../external node-commonjs \"os\"","../external node-commonjs \"stream\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require('vscode');\nconst fs = require('fs');\nconst csv = require('csv-parser');\nconst os = require('os');\n\nlet time_start;\nlet firstTimestamp;\nlet time_end = 0;\nlet lastTimestamp;\nlet t_model = vscode.window.createTerminal(\"Power Meter\");\n\nconst fileName = `Power-Report.csv`;\n\nfunction runPowerMeter() {\n    let py_cmd = __dirname + \"/PowerModel.py\";\n\t\tpy_cmd = `\"${py_cmd}\"`\n\t\tif(os.platform() === 'win32')\n\t\t\tt_model.sendText(\"python \"+ py_cmd);\n\t\telse t_model.sendText(\"python3 \"+ py_cmd);\n}\n\nfunction processcommand(userInput){\n    let cmd_userInput;\n\t\tlet dest_path;\n\t\tlet path_withcmd;\n\t\tif((userInput.substring(0, 7) === \"python \")){\n\t\t\tcmd_userInput = userInput.substring(7, userInput.length);\n\t\t\tdest_path = cmd_userInput;\n\t\t\tcmd_userInput = \"python \" + `\"${cmd_userInput}\"`;\n\t\t} else if((userInput.substring(0, 8) === \"python3 \")){\n\t\t\tcmd_userInput = userInput.substring(8, userInput.length);\n\t\t\tdest_path = cmd_userInput;\n\t\t\tcmd_userInput = \"python3 \" + `\"${cmd_userInput}\"`;\n\t\t} else if((userInput.substring(0, 5) === \"node \")){\n\t\t\tcmd_userInput = userInput.substring(5, userInput.length);\n\t\t\tdest_path = cmd_userInput;\n\t\t\tcmd_userInput = \"node \" + `\"${cmd_userInput}\"`;\n\t\t} else if((userInput.substring(0, 9) === \"java -cp \")){\n\t\t\tcmd_userInput = userInput.substring(9, userInput.length);\n\t\t\tpath_withcmd = userInput.substring(9, userInput.length);\n\t\t\tlet last_space_index =  path_withcmd.lastIndexOf(' ');\n\t\t\tlet file_path = path_withcmd.slice(0, last_space_index);\n\t\t\tcmd_userInput = path_withcmd.slice(last_space_index + 1);\n\t\t\tcmd_userInput = \"java -cp \" + `\"${file_path}\"`+ \" \" + cmd_userInput;\n\t\t\tdest_path = file_path;\n\t\t} else if((userInput.substring(0, 5) === \"java \")){\n\t\t\tcmd_userInput = userInput.substring(5, userInput.length);\n\t\t\tdest_path = cmd_userInput;\n\t\t\tcmd_userInput = \"java \" + `\"${cmd_userInput}\"`;\n\t\t}\n\t\telse {\n\t\t\tcmd_userInput = `\"${userInput}\"`;\n\t\t\tdest_path = cmd_userInput;\n\t\t}\n\t\treturn {dest_path, cmd_userInput};\n}\n\nasync function createoutputfile(filteredCsvData, destfileAddr){\n\tconst currentDate = new Date();\n\n\tconst year = currentDate.getFullYear();\n\tconst month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Add 1 because January is 0\n\tconst day = String(currentDate.getDate()).padStart(2, '0');\n\n\tconst hours = String(currentDate.getHours()).padStart(2, '0');\n\tconst minutes = String(currentDate.getMinutes()).padStart(2, '0');\n\tconst seconds = String(currentDate.getSeconds()).padStart(2, '0');\n\tconst milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');\n\n\tconst localCurrentTime = `${year}-${month}-${day}T:${hours}:${minutes}:${seconds}Z`;\n\tconst outputfilename = `Power-Report-${localCurrentTime}.csv`;\n\tconst outputfilename_withpath = __dirname + '//' + outputfilename;\n\tvscode.window.showInformationMessage(outputfilename_withpath);\n\n\t//await fs.writeFileSync(destfileAddr, filteredCsvData, 'utf8');\n\t//vscode.window.showInformationMessage('Test 2', filteredCsvData);\n}\n\nasync function commandtointerminal(cmd_userInput, destfileAddr){\n\tawait vscode.commands.executeCommand('workbench.action.terminal.sendSequence', {\n\t\ttext: `${cmd_userInput}\\r`\n\t})\n\tconst {exec} = require('child_process');\n\tawait exec(`${cmd_userInput}`, async (error, stdout, stderr)=>{\n\t\tif(error){\n\t\t\tvscode.window.showInformationMessage('Input Error!', String(error));\n\t\t\tvscode.window.showInformationMessage('Input String...', cmd_userInput);\n\t\t\treturn;\n\t\t}\n\t\tif(stderr){\n\t\t\tvscode.window.showInformationMessage('stderr');\n\t\t\treturn;\n\t\t}\n\t\n\t\tlet k_end = fs.createReadStream(__dirname + \"/power_log1.csv\");\n\t\tk_end.pipe(csv())\n\t\t.on('data', (row) => {\n\t\t\tlastTimestamp = row.timestamp;\n\t\t})\n\t\t.on('end', async() => {\n\t\t\ttime_end = lastTimestamp;\n\t\t});\n\t\t\n\t\tconst csvData = fs.readFileSync(__dirname + \"/power_log1.csv\", 'utf8');\n\t\tconst rows = csvData.trim().split('\\n').map(row => {\n\t\t\tconst [timestamp, CPU_utilization, power] = row.split(',').map(Number);\n\t\t\treturn { timestamp, CPU_utilization, power };\n\t\t  });\n\n\t\tconst filteredRows = rows.filter(row => row.timestamp >= firstTimestamp);\n\t\tconst filteredCsvData = filteredRows.map(row => `${row.timestamp},${row.CPU_utilization},${row.power}`).join('\\n');\n\t\t\n\t\tawait fs.writeFileSync(destfileAddr, filteredCsvData, 'utf8');\n\t\tvscode.window.showInformationMessage('Test 2', filteredCsvData);\n\t\t//copy a file\n\t\tcreateoutputfile(filteredCsvData);\n\t\t\n\t\tvscode.window.showInformationMessage('Your Power Report is available at ', destfileAddr);\n\t})\n}\n/**\n * @param {vscode.ExtensionContext} context\n */\n\nfunction activate(context) {\n\tlet disposable = vscode.commands.registerCommand('g', async function () {\n\t\trunPowerMeter();\n\t\tconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n\n\t\tlet power_log_error_check = __dirname + \"/power_log1.csv\";\n\t\tlet k = fs.createReadStream(power_log_error_check);\n\t\t\n\t\tvar userInput = await vscode.window.showInputBox({\n\t\t\t//prompt: 'Enter Command...'\n\t\t});\n\t\tlet outputofexecutioncmd,  dest_path, cmd_userInput;\n\t\toutputofexecutioncmd = processcommand(userInput);\n\t\tdest_path =  outputofexecutioncmd.dest_path;\n\t\tcmd_userInput = outputofexecutioncmd.cmd_userInput;\n\t\t\n\t\tconst file_name = dest_path.replace(/^.*[\\\\/]/, '');\n\t\tconst destfilepath = dest_path.replace(file_name, '');\n\t\tconst destfileAddr = destfilepath + '//' + fileName;\n\t\tvscode.window.showInformationMessage('Measurement Running...');\n\n\t\tawait delay(10000);\n\n\t\tk.pipe(csv())\n    \t.on('data', (row) => {\n        \tfirstTimestamp = row.timestamp;\n    \t})\n\t    .on('end', () => {\n    \t    time_start = firstTimestamp;\n    \t});\n\n\t\tcommandtointerminal(cmd_userInput, destfileAddr);\n\t\n\t\tawait delay(30000);\n\t\tt_model.sendText('\\x03');\n\t});\n\t\t\n\tcontext.subscriptions.push(disposable);\n}\n\nfunction deactivate() {}\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}","const { Transform } = require('stream')\n\nconst [cr] = Buffer.from('\\r')\nconst [nl] = Buffer.from('\\n')\nconst defaults = {\n  escape: '\"',\n  headers: null,\n  mapHeaders: ({ header }) => header,\n  mapValues: ({ value }) => value,\n  newline: '\\n',\n  quote: '\"',\n  raw: false,\n  separator: ',',\n  skipComments: false,\n  skipLines: null,\n  maxRowBytes: Number.MAX_SAFE_INTEGER,\n  strict: false\n}\n\nclass CsvParser extends Transform {\n  constructor (opts = {}) {\n    super({ objectMode: true, highWaterMark: 16 })\n\n    if (Array.isArray(opts)) opts = { headers: opts }\n\n    const options = Object.assign({}, defaults, opts)\n\n    options.customNewline = options.newline !== defaults.newline\n\n    for (const key of ['newline', 'quote', 'separator']) {\n      if (typeof options[key] !== 'undefined') {\n        ([options[key]] = Buffer.from(options[key]))\n      }\n    }\n\n    // if escape is not defined on the passed options, use the end value of quote\n    options.escape = (opts || {}).escape ? Buffer.from(options.escape)[0] : options.quote\n\n    this.state = {\n      empty: options.raw ? Buffer.alloc(0) : '',\n      escaped: false,\n      first: true,\n      lineNumber: 0,\n      previousEnd: 0,\n      rowLength: 0,\n      quoted: false\n    }\n\n    this._prev = null\n\n    if (options.headers === false) {\n      // enforce, as the column length check will fail if headers:false\n      options.strict = false\n    }\n\n    if (options.headers || options.headers === false) {\n      this.state.first = false\n    }\n\n    this.options = options\n    this.headers = options.headers\n  }\n\n  parseCell (buffer, start, end) {\n    const { escape, quote } = this.options\n    // remove quotes from quoted cells\n    if (buffer[start] === quote && buffer[end - 1] === quote) {\n      start++\n      end--\n    }\n\n    let y = start\n\n    for (let i = start; i < end; i++) {\n      // check for escape characters and skip them\n      if (buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote) {\n        i++\n      }\n\n      if (y !== i) {\n        buffer[y] = buffer[i]\n      }\n      y++\n    }\n\n    return this.parseValue(buffer, start, y)\n  }\n\n  parseLine (buffer, start, end) {\n    const { customNewline, escape, mapHeaders, mapValues, quote, separator, skipComments, skipLines } = this.options\n\n    end-- // trim newline\n    if (!customNewline && buffer.length && buffer[end - 1] === cr) {\n      end--\n    }\n\n    const comma = separator\n    const cells = []\n    let isQuoted = false\n    let offset = start\n\n    if (skipComments) {\n      const char = typeof skipComments === 'string' ? skipComments : '#'\n      if (buffer[start] === Buffer.from(char)[0]) {\n        return\n      }\n    }\n\n    const mapValue = (value) => {\n      if (this.state.first) {\n        return value\n      }\n\n      const index = cells.length\n      const header = this.headers[index]\n\n      return mapValues({ header, index, value })\n    }\n\n    for (let i = start; i < end; i++) {\n      const isStartingQuote = !isQuoted && buffer[i] === quote\n      const isEndingQuote = isQuoted && buffer[i] === quote && i + 1 <= end && buffer[i + 1] === comma\n      const isEscape = isQuoted && buffer[i] === escape && i + 1 < end && buffer[i + 1] === quote\n\n      if (isStartingQuote || isEndingQuote) {\n        isQuoted = !isQuoted\n        continue\n      } else if (isEscape) {\n        i++\n        continue\n      }\n\n      if (buffer[i] === comma && !isQuoted) {\n        let value = this.parseCell(buffer, offset, i)\n        value = mapValue(value)\n        cells.push(value)\n        offset = i + 1\n      }\n    }\n\n    if (offset < end) {\n      let value = this.parseCell(buffer, offset, end)\n      value = mapValue(value)\n      cells.push(value)\n    }\n\n    if (buffer[end - 1] === comma) {\n      cells.push(mapValue(this.state.empty))\n    }\n\n    const skip = skipLines && skipLines > this.state.lineNumber\n    this.state.lineNumber++\n\n    if (this.state.first && !skip) {\n      this.state.first = false\n      this.headers = cells.map((header, index) => mapHeaders({ header, index }))\n\n      this.emit('headers', this.headers)\n      return\n    }\n\n    if (!skip && this.options.strict && cells.length !== this.headers.length) {\n      const e = new RangeError('Row length does not match headers')\n      this.emit('error', e)\n    } else {\n      if (!skip) this.writeRow(cells)\n    }\n  }\n\n  parseValue (buffer, start, end) {\n    if (this.options.raw) {\n      return buffer.slice(start, end)\n    }\n\n    return buffer.toString('utf-8', start, end)\n  }\n\n  writeRow (cells) {\n    const headers = (this.headers === false) ? cells.map((value, index) => index) : this.headers\n\n    const row = cells.reduce((o, cell, index) => {\n      const header = headers[index]\n      if (header === null) return o // skip columns\n      if (header !== undefined) {\n        o[header] = cell\n      } else {\n        o[`_${index}`] = cell\n      }\n      return o\n    }, {})\n\n    this.push(row)\n  }\n\n  _flush (cb) {\n    if (this.state.escaped || !this._prev) return cb()\n    this.parseLine(this._prev, this.state.previousEnd, this._prev.length + 1) // plus since online -1s\n    cb()\n  }\n\n  _transform (data, enc, cb) {\n    if (typeof data === 'string') {\n      data = Buffer.from(data)\n    }\n\n    const { escape, quote } = this.options\n    let start = 0\n    let buffer = data\n\n    if (this._prev) {\n      start = this._prev.length\n      buffer = Buffer.concat([this._prev, data])\n      this._prev = null\n    }\n\n    const bufferLength = buffer.length\n\n    for (let i = start; i < bufferLength; i++) {\n      const chr = buffer[i]\n      const nextChr = i + 1 < bufferLength ? buffer[i + 1] : null\n\n      this.state.rowLength++\n      if (this.state.rowLength > this.options.maxRowBytes) {\n        return cb(new Error('Row exceeds the maximum size'))\n      }\n\n      if (!this.state.escaped && chr === escape && nextChr === quote && i !== start) {\n        this.state.escaped = true\n        continue\n      } else if (chr === quote) {\n        if (this.state.escaped) {\n          this.state.escaped = false\n          // non-escaped quote (quoting the cell)\n        } else {\n          this.state.quoted = !this.state.quoted\n        }\n        continue\n      }\n\n      if (!this.state.quoted) {\n        if (this.state.first && !this.options.customNewline) {\n          if (chr === nl) {\n            this.options.newline = nl\n          } else if (chr === cr) {\n            if (nextChr !== nl) {\n              this.options.newline = cr\n            }\n          }\n        }\n\n        if (chr === this.options.newline) {\n          this.parseLine(buffer, this.state.previousEnd, i + 1)\n          this.state.previousEnd = i + 1\n          this.state.rowLength = 0\n        }\n      }\n    }\n\n    if (this.state.previousEnd === bufferLength) {\n      this.state.previousEnd = 0\n      return cb()\n    }\n\n    if (bufferLength - this.state.previousEnd < data.length) {\n      this._prev = data\n      this.state.previousEnd -= (bufferLength - data.length)\n      return cb()\n    }\n\n    this._prev = buffer\n    cb()\n  }\n}\n\nmodule.exports = (opts) => new CsvParser(opts)\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"stream\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(554);\n"],"names":["vscode","fs","csv","os","time_start","firstTimestamp","lastTimestamp","time_end","t_model","window","createTerminal","module","exports","activate","context","disposable","commands","registerCommand","async","py_cmd","__dirname","platform","sendText","runPowerMeter","delay","ms","Promise","resolve","setTimeout","outputofexecutioncmd","dest_path","cmd_userInput","power_log_error_check","k","createReadStream","userInput","path_withcmd","substring","length","last_space_index","lastIndexOf","file_path","slice","processcommand","showInputBox","file_name","replace","destfileAddr","destfilepath","showInformationMessage","pipe","on","row","timestamp","executeCommand","text","exec","error","stdout","stderr","String","filteredCsvData","readFileSync","trim","split","map","CPU_utilization","power","Number","filter","join","writeFileSync","currentDate","Date","year","getFullYear","month","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","outputfilename_withpath","getMilliseconds","createoutputfile","commandtointerminal","subscriptions","push","deactivate","Transform","cr","Buffer","from","nl","defaults","escape","headers","mapHeaders","header","mapValues","value","newline","quote","raw","separator","skipComments","skipLines","maxRowBytes","MAX_SAFE_INTEGER","strict","CsvParser","constructor","opts","super","objectMode","highWaterMark","Array","isArray","options","Object","assign","customNewline","key","this","state","empty","alloc","escaped","first","lineNumber","previousEnd","rowLength","quoted","_prev","parseCell","buffer","start","end","y","i","parseValue","parseLine","comma","cells","isQuoted","offset","char","mapValue","index","isStartingQuote","isEndingQuote","isEscape","skip","emit","e","RangeError","writeRow","toString","reduce","o","cell","undefined","_flush","cb","_transform","data","enc","concat","bufferLength","chr","nextChr","Error","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}